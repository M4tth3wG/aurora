// <auto-generated />
using System;
using Aurora.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Aurora.Migrations
{
    [DbContext(typeof(DataDbContext))]
    [Migration("20240131133454_AddingDataAdrian4")]
    partial class AddingDataAdrian4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AplikacjaRekrutacyjnaDziedzinaEgzaminuWstepnego", b =>
                {
                    b.Property<int>("AplikacjeRekrutacyjneID")
                        .HasColumnType("int");

                    b.Property<int>("EgzaminyWstepneID")
                        .HasColumnType("int");

                    b.HasKey("AplikacjeRekrutacyjneID", "EgzaminyWstepneID");

                    b.HasIndex("EgzaminyWstepneID");

                    b.ToTable("AplikacjaRekrutacyjnaDziedzinaEgzaminuWstepnego");
                });

            modelBuilder.Entity("Aurora.Models.Adres", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KodPocztowy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Miejscowosc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NumerBudynku")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID");

                    b.ToTable("Adresy");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            KodPocztowy = "00-001",
                            Miejscowosc = "Warszawa",
                            NumerBudynku = "123",
                            Ulica = "Aleje Jerozolimskie"
                        },
                        new
                        {
                            ID = 2,
                            KodPocztowy = "30-062",
                            Miejscowosc = "Kraków",
                            NumerBudynku = "45",
                            Ulica = "Rynek Główny"
                        },
                        new
                        {
                            ID = 3,
                            KodPocztowy = "80-830",
                            Miejscowosc = "Gdańsk",
                            NumerBudynku = "8",
                            Ulica = "Długi Targ"
                        },
                        new
                        {
                            ID = 4,
                            KodPocztowy = "50-384",
                            Miejscowosc = "Wrocław",
                            NumerBudynku = "4",
                            Ulica = "Plac Grunwaldzki"
                        },
                        new
                        {
                            ID = 5,
                            KodPocztowy = "20-230",
                            Miejscowosc = "Lublin",
                            NumerBudynku = "67",
                            Ulica = "Mickiewicza"
                        },
                        new
                        {
                            ID = 6,
                            KodPocztowy = "40-042",
                            Miejscowosc = "Katowice",
                            NumerBudynku = "15",
                            Ulica = "Wita Stwosza"
                        });
                });

            modelBuilder.Entity("Aurora.Models.AplikacjaRekrutacyjna", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataZlozenia")
                        .HasColumnType("datetime2");

                    b.Property<int>("KandydatID")
                        .HasColumnType("int");

                    b.Property<int>("KierunekStudiowID")
                        .HasColumnType("int");

                    b.Property<int>("OplataRekrutacyjnaID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TuraRekrutacjiID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("KandydatID");

                    b.HasIndex("KierunekStudiowID");

                    b.HasIndex("OplataRekrutacyjnaID");

                    b.HasIndex("TuraRekrutacjiID");

                    b.ToTable("AplikacjeRekrutacyjne");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DataZlozenia = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KandydatID = 2,
                            KierunekStudiowID = 1,
                            OplataRekrutacyjnaID = 1,
                            Status = 8,
                            TuraRekrutacjiID = 1
                        },
                        new
                        {
                            ID = 2,
                            DataZlozenia = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KandydatID = 2,
                            KierunekStudiowID = 2,
                            OplataRekrutacyjnaID = 2,
                            Status = 8,
                            TuraRekrutacjiID = 2
                        },
                        new
                        {
                            ID = 3,
                            DataZlozenia = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KandydatID = 1,
                            KierunekStudiowID = 2,
                            OplataRekrutacyjnaID = 3,
                            Status = 5,
                            TuraRekrutacjiID = 3
                        },
                        new
                        {
                            ID = 4,
                            DataZlozenia = new DateTime(2023, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KandydatID = 2,
                            KierunekStudiowID = 2,
                            OplataRekrutacyjnaID = 4,
                            Status = 5,
                            TuraRekrutacjiID = 3
                        },
                        new
                        {
                            ID = 5,
                            DataZlozenia = new DateTime(2023, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KandydatID = 3,
                            KierunekStudiowID = 2,
                            OplataRekrutacyjnaID = 5,
                            Status = 6,
                            TuraRekrutacjiID = 3
                        },
                        new
                        {
                            ID = 6,
                            DataZlozenia = new DateTime(2023, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KandydatID = 4,
                            KierunekStudiowID = 2,
                            OplataRekrutacyjnaID = 6,
                            Status = 6,
                            TuraRekrutacjiID = 3
                        },
                        new
                        {
                            ID = 7,
                            DataZlozenia = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KandydatID = 5,
                            KierunekStudiowID = 2,
                            OplataRekrutacyjnaID = 7,
                            Status = 5,
                            TuraRekrutacjiID = 3
                        },
                        new
                        {
                            ID = 8,
                            DataZlozenia = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KandydatID = 6,
                            KierunekStudiowID = 2,
                            OplataRekrutacyjnaID = 8,
                            Status = 6,
                            TuraRekrutacjiID = 3
                        },
                        new
                        {
                            ID = 9,
                            DataZlozenia = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KandydatID = 7,
                            KierunekStudiowID = 3,
                            OplataRekrutacyjnaID = 9,
                            Status = 8,
                            TuraRekrutacjiID = 4
                        },
                        new
                        {
                            ID = 10,
                            DataZlozenia = new DateTime(2023, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KandydatID = 1,
                            KierunekStudiowID = 1,
                            OplataRekrutacyjnaID = 10,
                            Status = 5,
                            TuraRekrutacjiID = 5
                        },
                        new
                        {
                            ID = 11,
                            DataZlozenia = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KandydatID = 2,
                            KierunekStudiowID = 1,
                            OplataRekrutacyjnaID = 11,
                            Status = 5,
                            TuraRekrutacjiID = 5
                        },
                        new
                        {
                            ID = 12,
                            DataZlozenia = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KandydatID = 3,
                            KierunekStudiowID = 1,
                            OplataRekrutacyjnaID = 12,
                            Status = 6,
                            TuraRekrutacjiID = 5
                        },
                        new
                        {
                            ID = 13,
                            DataZlozenia = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KandydatID = 2,
                            KierunekStudiowID = 3,
                            OplataRekrutacyjnaID = 13,
                            Status = 7,
                            TuraRekrutacjiID = 4
                        },
                        new
                        {
                            ID = 14,
                            DataZlozenia = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KandydatID = 2,
                            KierunekStudiowID = 5,
                            OplataRekrutacyjnaID = 14,
                            Status = 8,
                            TuraRekrutacjiID = 6
                        });
                });

            modelBuilder.Entity("Aurora.Models.AplikacjaRekrutacyjnaDokument", b =>
                {
                    b.Property<int>("DokumentID")
                        .HasColumnType("int");

                    b.Property<int>("AplikacjaRekrutacyjnaID")
                        .HasColumnType("int");

                    b.HasKey("DokumentID", "AplikacjaRekrutacyjnaID");

                    b.HasIndex("AplikacjaRekrutacyjnaID");

                    b.ToTable("AplikacjaRekrutacyjnaDokument");

                    b.HasData(
                        new
                        {
                            DokumentID = 1,
                            AplikacjaRekrutacyjnaID = 1
                        },
                        new
                        {
                            DokumentID = 2,
                            AplikacjaRekrutacyjnaID = 2
                        },
                        new
                        {
                            DokumentID = 3,
                            AplikacjaRekrutacyjnaID = 3
                        },
                        new
                        {
                            DokumentID = 4,
                            AplikacjaRekrutacyjnaID = 4
                        },
                        new
                        {
                            DokumentID = 5,
                            AplikacjaRekrutacyjnaID = 5
                        },
                        new
                        {
                            DokumentID = 6,
                            AplikacjaRekrutacyjnaID = 6
                        },
                        new
                        {
                            DokumentID = 7,
                            AplikacjaRekrutacyjnaID = 7
                        },
                        new
                        {
                            DokumentID = 8,
                            AplikacjaRekrutacyjnaID = 8
                        });
                });

            modelBuilder.Entity("Aurora.Models.Dokument", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RodzajDokumentu")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Dokument");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            RodzajDokumentu = 1
                        },
                        new
                        {
                            ID = 2,
                            RodzajDokumentu = 1
                        },
                        new
                        {
                            ID = 3,
                            RodzajDokumentu = 1
                        },
                        new
                        {
                            ID = 4,
                            RodzajDokumentu = 1
                        },
                        new
                        {
                            ID = 5,
                            RodzajDokumentu = 1
                        },
                        new
                        {
                            ID = 6,
                            RodzajDokumentu = 1
                        },
                        new
                        {
                            ID = 7,
                            RodzajDokumentu = 1
                        },
                        new
                        {
                            ID = 8,
                            RodzajDokumentu = 1
                        });
                });

            modelBuilder.Entity("Aurora.Models.DokumentTura", b =>
                {
                    b.Property<int>("DokumentID")
                        .HasColumnType("int");

                    b.Property<int>("TuraRekrutacjiID")
                        .HasColumnType("int");

                    b.HasKey("DokumentID", "TuraRekrutacjiID");

                    b.HasIndex("TuraRekrutacjiID");

                    b.ToTable("DokumentTura");

                    b.HasData(
                        new
                        {
                            DokumentID = 1,
                            TuraRekrutacjiID = 1
                        },
                        new
                        {
                            DokumentID = 2,
                            TuraRekrutacjiID = 2
                        },
                        new
                        {
                            DokumentID = 3,
                            TuraRekrutacjiID = 3
                        },
                        new
                        {
                            DokumentID = 4,
                            TuraRekrutacjiID = 3
                        },
                        new
                        {
                            DokumentID = 5,
                            TuraRekrutacjiID = 3
                        },
                        new
                        {
                            DokumentID = 6,
                            TuraRekrutacjiID = 3
                        },
                        new
                        {
                            DokumentID = 7,
                            TuraRekrutacjiID = 3
                        },
                        new
                        {
                            DokumentID = 8,
                            TuraRekrutacjiID = 3
                        });
                });

            modelBuilder.Entity("Aurora.Models.DziedzinaEgzaminuWstepnego", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Dziedzina")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Dziedzina")
                        .IsUnique();

                    b.ToTable("DziedzinaEgzaminuWstepnego");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Dziedzina = "Matematyka"
                        },
                        new
                        {
                            ID = 2,
                            Dziedzina = "Fizyka"
                        },
                        new
                        {
                            ID = 3,
                            Dziedzina = "Chemia"
                        },
                        new
                        {
                            ID = 4,
                            Dziedzina = "Biologia"
                        },
                        new
                        {
                            ID = 5,
                            Dziedzina = "Język angielski"
                        });
                });

            modelBuilder.Entity("Aurora.Models.DziedzinaEgzaminuWstepnegoKierunekStudiow", b =>
                {
                    b.Property<int>("DziedzinaID")
                        .HasColumnType("int");

                    b.Property<int>("KierunekStudiowID")
                        .HasColumnType("int");

                    b.HasKey("DziedzinaID", "KierunekStudiowID");

                    b.HasIndex("KierunekStudiowID");

                    b.ToTable("DziedzinaEgzaminuWstepnegoKierunekStudiow");

                    b.HasData(
                        new
                        {
                            DziedzinaID = 1,
                            KierunekStudiowID = 2
                        },
                        new
                        {
                            DziedzinaID = 2,
                            KierunekStudiowID = 2
                        },
                        new
                        {
                            DziedzinaID = 5,
                            KierunekStudiowID = 2
                        });
                });

            modelBuilder.Entity("Aurora.Models.Egzamin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Dziedzina")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Forma")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("KandydatID")
                        .HasColumnType("int");

                    b.Property<string>("Kod")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Kwalifikacje")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("LiczbaPunktow")
                        .HasColumnType("float");

                    b.Property<double?>("MaksymalnaLiczbaPunktow")
                        .HasColumnType("float");

                    b.Property<string>("Ocena")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Organ")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Poziom")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Przedmiot")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("TuraRekrutacjiID")
                        .HasColumnType("int");

                    b.Property<double?>("WynikProcentowy")
                        .HasColumnType("float");

                    b.Property<string>("ZawodNauczany")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("KandydatID");

                    b.HasIndex("TuraRekrutacjiID");

                    b.ToTable("Egzaminy");
                });

            modelBuilder.Entity("Aurora.Models.Kandydat", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdresEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("AdresID")
                        .HasColumnType("int");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PESEL")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("ID");

                    b.HasIndex("AdresEmail")
                        .IsUnique();

                    b.HasIndex("AdresID");

                    b.HasIndex("PESEL")
                        .IsUnique();

                    b.ToTable("Kandydaci");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AdresEmail = "jan.kowalski@example.com",
                            AdresID = 2,
                            Imie = "Jan",
                            Nazwisko = "Kowalski",
                            PESEL = "12345678901"
                        },
                        new
                        {
                            ID = 2,
                            AdresEmail = "anna.nowak@example.com",
                            AdresID = 3,
                            Imie = "Anna",
                            Nazwisko = "Nowak",
                            PESEL = "98765432109"
                        },
                        new
                        {
                            ID = 3,
                            AdresEmail = "piotr.zalewski@example.com",
                            AdresID = 1,
                            Imie = "Piotr",
                            Nazwisko = "Zalewski",
                            PESEL = "55511133344"
                        },
                        new
                        {
                            ID = 4,
                            AdresEmail = "adam.kowalski@example.com",
                            AdresID = 4,
                            Imie = "Adam",
                            Nazwisko = "Kowalski",
                            PESEL = "66677733212"
                        },
                        new
                        {
                            ID = 5,
                            AdresEmail = "karolina.nowak@example.com",
                            AdresID = 5,
                            Imie = "Karolina",
                            Nazwisko = "Nowak",
                            PESEL = "12345678902"
                        },
                        new
                        {
                            ID = 6,
                            AdresEmail = "marek.lis@example.com",
                            AdresID = 6,
                            Imie = "Marek",
                            Nazwisko = "Lis",
                            PESEL = "98765432103"
                        },
                        new
                        {
                            ID = 7,
                            AdresEmail = "szymon.nowak@example.com",
                            AdresID = 3,
                            Imie = "Szymon",
                            Nazwisko = "Nowak",
                            PESEL = "66677889900"
                        });
                });

            modelBuilder.Entity("Aurora.Models.KandydatKierunekStudiow", b =>
                {
                    b.Property<int>("KandydatID")
                        .HasColumnType("int");

                    b.Property<int>("KierunekStudiowID")
                        .HasColumnType("int");

                    b.HasKey("KandydatID", "KierunekStudiowID");

                    b.HasIndex("KierunekStudiowID");

                    b.ToTable("KandydatKierunekStudiow");
                });

            modelBuilder.Entity("Aurora.Models.KandydatTuraRekrutacji", b =>
                {
                    b.Property<int>("KandydatID")
                        .HasColumnType("int");

                    b.Property<int>("TuraRekrutacjiID")
                        .HasColumnType("int");

                    b.HasKey("KandydatID", "TuraRekrutacjiID");

                    b.HasIndex("TuraRekrutacjiID");

                    b.ToTable("KandydaciTuryRekrutacji");
                });

            modelBuilder.Entity("Aurora.Models.KandydatUlubionyKierunekStudiow", b =>
                {
                    b.Property<int>("KandydatID")
                        .HasColumnType("int");

                    b.Property<int>("UlubionyKierunekStudiowID")
                        .HasColumnType("int");

                    b.HasKey("KandydatID", "UlubionyKierunekStudiowID");

                    b.HasIndex("UlubionyKierunekStudiowID");

                    b.ToTable("KandydatUlubionyKierunekStudiow");
                });

            modelBuilder.Entity("Aurora.Models.KierunekStudiow", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Czesne")
                        .HasColumnType("float");

                    b.Property<double>("CzesneDlaObcokrajowcow")
                        .HasColumnType("float");

                    b.Property<int>("FormaStudiow")
                        .HasColumnType("int");

                    b.Property<int>("JezykWykladowy")
                        .HasColumnType("int");

                    b.Property<int>("MiejsceStudiow")
                        .HasColumnType("int");

                    b.Property<string>("NazwaKierunku")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OpisKierunku")
                        .HasMaxLength(1023)
                        .HasColumnType("nvarchar(1023)");

                    b.Property<int>("PoziomStudiow")
                        .HasColumnType("int");

                    b.Property<int>("StrategiaID")
                        .HasColumnType("int");

                    b.Property<int>("Wydzial")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("KierunkiStudiow");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Czesne = 0.0,
                            CzesneDlaObcokrajowcow = 1500.0,
                            FormaStudiow = 0,
                            JezykWykladowy = 1,
                            MiejsceStudiow = 0,
                            NazwaKierunku = "Architektura",
                            OpisKierunku = "Architektura dla ambitnych",
                            PoziomStudiow = 2,
                            StrategiaID = 8,
                            Wydzial = 0
                        },
                        new
                        {
                            ID = 2,
                            Czesne = 0.0,
                            CzesneDlaObcokrajowcow = 1250.0,
                            FormaStudiow = 0,
                            JezykWykladowy = 1,
                            MiejsceStudiow = 0,
                            NazwaKierunku = "Automatyka i Robotyka",
                            OpisKierunku = "AiR dla wymagających",
                            PoziomStudiow = 3,
                            StrategiaID = 0,
                            Wydzial = 10
                        },
                        new
                        {
                            ID = 3,
                            Czesne = 0.0,
                            CzesneDlaObcokrajowcow = 1250.0,
                            FormaStudiow = 0,
                            JezykWykladowy = 0,
                            MiejsceStudiow = 0,
                            NazwaKierunku = "Fizyka techniczna",
                            OpisKierunku = "Odkryj nowe oblicze fizyki",
                            PoziomStudiow = 3,
                            StrategiaID = 0,
                            Wydzial = 9
                        },
                        new
                        {
                            ID = 4,
                            Czesne = 0.0,
                            CzesneDlaObcokrajowcow = 1250.0,
                            FormaStudiow = 0,
                            JezykWykladowy = 0,
                            MiejsceStudiow = 0,
                            NazwaKierunku = "Informatyka techniczna",
                            OpisKierunku = "Informatyka Techniczna: Kształtowanie Przyszłości Technologii",
                            PoziomStudiow = 3,
                            StrategiaID = 4,
                            Wydzial = 3
                        },
                        new
                        {
                            ID = 5,
                            Czesne = 0.0,
                            CzesneDlaObcokrajowcow = 1250.0,
                            FormaStudiow = 1,
                            JezykWykladowy = 1,
                            MiejsceStudiow = 0,
                            NazwaKierunku = "Fizyka techniczna",
                            OpisKierunku = "Odkryj nowe oblicze fizyki",
                            PoziomStudiow = 3,
                            StrategiaID = 0,
                            Wydzial = 9
                        });
                });

            modelBuilder.Entity("Aurora.Models.Opinia", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InformowanieOStatusie")
                        .HasColumnType("int");

                    b.Property<int>("IntuicyjnoscSystemu")
                        .HasColumnType("int");

                    b.Property<int?>("JakoscPomocy")
                        .HasColumnType("int");

                    b.Property<int>("KandydatID")
                        .HasColumnType("int");

                    b.Property<string>("Tresc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TuraRekrutacjiID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("KandydatID");

                    b.HasIndex("TuraRekrutacjiID");

                    b.ToTable("Opinia");
                });

            modelBuilder.Entity("Aurora.Models.OplataRekrutacyjna", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KandydatID")
                        .HasColumnType("int");

                    b.Property<double>("Kwota")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("KandydatID");

                    b.ToTable("OplatyRekrutacyjne");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            KandydatID = 2,
                            Kwota = 80.0
                        },
                        new
                        {
                            ID = 2,
                            KandydatID = 2,
                            Kwota = 80.0
                        },
                        new
                        {
                            ID = 3,
                            KandydatID = 1,
                            Kwota = 80.0
                        },
                        new
                        {
                            ID = 4,
                            KandydatID = 2,
                            Kwota = 80.0
                        },
                        new
                        {
                            ID = 5,
                            KandydatID = 3,
                            Kwota = 80.0
                        },
                        new
                        {
                            ID = 6,
                            KandydatID = 4,
                            Kwota = 80.0
                        },
                        new
                        {
                            ID = 7,
                            KandydatID = 5,
                            Kwota = 80.0
                        },
                        new
                        {
                            ID = 8,
                            KandydatID = 6,
                            Kwota = 80.0
                        },
                        new
                        {
                            ID = 9,
                            KandydatID = 2,
                            Kwota = 80.0
                        },
                        new
                        {
                            ID = 10,
                            KandydatID = 1,
                            Kwota = 80.0
                        },
                        new
                        {
                            ID = 11,
                            KandydatID = 2,
                            Kwota = 80.0
                        },
                        new
                        {
                            ID = 12,
                            KandydatID = 3,
                            Kwota = 80.0
                        },
                        new
                        {
                            ID = 13,
                            KandydatID = 2,
                            Kwota = 80.0
                        },
                        new
                        {
                            ID = 14,
                            KandydatID = 2,
                            Kwota = 80.0
                        });
                });

            modelBuilder.Entity("Aurora.Models.PracownikDziekanatu", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdresEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Wydzial")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("PracownicyDziekanatu");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AdresEmail = "natalia.kowalczyk@pwr.edu.pl",
                            Imie = "Natalia",
                            Nazwisko = "Kowalczyk",
                            Wydzial = 0
                        },
                        new
                        {
                            ID = 2,
                            AdresEmail = "jakub.nowak@pwr.edu.pl",
                            Imie = "Jakub",
                            Nazwisko = "Nowak",
                            Wydzial = 10
                        });
                });

            modelBuilder.Entity("Aurora.Models.SkladowaWspRekrut", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EgzaminID")
                        .HasColumnType("int");

                    b.Property<double>("LiczbaPunktow")
                        .HasColumnType("float");

                    b.Property<int?>("PrzedmiotMaturalny")
                        .HasColumnType("int");

                    b.Property<int>("RodzajSkladowejWspRekrut")
                        .HasColumnType("int");

                    b.Property<int>("WspolczynnikRekrutacyjnyID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EgzaminID");

                    b.HasIndex("WspolczynnikRekrutacyjnyID");

                    b.ToTable("SkladoweWspRekrut");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 1
                        },
                        new
                        {
                            ID = 2,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 3,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 1
                        },
                        new
                        {
                            ID = 3,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 1
                        },
                        new
                        {
                            ID = 4,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 1
                        },
                        new
                        {
                            ID = 5,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 1
                        },
                        new
                        {
                            ID = 6,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 1
                        },
                        new
                        {
                            ID = 7,
                            LiczbaPunktow = 250.0,
                            RodzajSkladowejWspRekrut = 2,
                            WspolczynnikRekrutacyjnyID = 1
                        },
                        new
                        {
                            ID = 8,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 2
                        },
                        new
                        {
                            ID = 9,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 3,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 2
                        },
                        new
                        {
                            ID = 10,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 2
                        },
                        new
                        {
                            ID = 11,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 2
                        },
                        new
                        {
                            ID = 12,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 2
                        },
                        new
                        {
                            ID = 13,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 2
                        },
                        new
                        {
                            ID = 14,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 2
                        },
                        new
                        {
                            ID = 15,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 3
                        },
                        new
                        {
                            ID = 16,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 3,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 3
                        },
                        new
                        {
                            ID = 17,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 3
                        },
                        new
                        {
                            ID = 18,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 3
                        },
                        new
                        {
                            ID = 19,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 3
                        },
                        new
                        {
                            ID = 20,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 3
                        },
                        new
                        {
                            ID = 21,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 3
                        },
                        new
                        {
                            ID = 22,
                            LiczbaPunktow = 60.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 4
                        },
                        new
                        {
                            ID = 23,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 3,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 4
                        },
                        new
                        {
                            ID = 24,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 4
                        },
                        new
                        {
                            ID = 25,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 4
                        },
                        new
                        {
                            ID = 26,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 4
                        },
                        new
                        {
                            ID = 27,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 4
                        },
                        new
                        {
                            ID = 28,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 4
                        },
                        new
                        {
                            ID = 29,
                            LiczbaPunktow = 50.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 5
                        },
                        new
                        {
                            ID = 30,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 3,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 5
                        },
                        new
                        {
                            ID = 31,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 5
                        },
                        new
                        {
                            ID = 32,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 5
                        },
                        new
                        {
                            ID = 33,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 5
                        },
                        new
                        {
                            ID = 34,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 5
                        },
                        new
                        {
                            ID = 35,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 5
                        },
                        new
                        {
                            ID = 36,
                            LiczbaPunktow = 40.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 6
                        },
                        new
                        {
                            ID = 37,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 3,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 6
                        },
                        new
                        {
                            ID = 38,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 6
                        },
                        new
                        {
                            ID = 39,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 6
                        },
                        new
                        {
                            ID = 40,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 6
                        },
                        new
                        {
                            ID = 41,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 6
                        },
                        new
                        {
                            ID = 42,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 6
                        },
                        new
                        {
                            ID = 43,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 7
                        },
                        new
                        {
                            ID = 44,
                            LiczbaPunktow = 65.0,
                            PrzedmiotMaturalny = 3,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 7
                        },
                        new
                        {
                            ID = 45,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 7
                        },
                        new
                        {
                            ID = 46,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 7
                        },
                        new
                        {
                            ID = 47,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 7
                        },
                        new
                        {
                            ID = 48,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 7
                        },
                        new
                        {
                            ID = 49,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 7
                        },
                        new
                        {
                            ID = 50,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 8
                        },
                        new
                        {
                            ID = 51,
                            LiczbaPunktow = 55.0,
                            PrzedmiotMaturalny = 3,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 8
                        },
                        new
                        {
                            ID = 52,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 8
                        },
                        new
                        {
                            ID = 53,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 8
                        },
                        new
                        {
                            ID = 54,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 8
                        },
                        new
                        {
                            ID = 55,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 8
                        },
                        new
                        {
                            ID = 56,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 8
                        },
                        new
                        {
                            ID = 57,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 1
                        },
                        new
                        {
                            ID = 58,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 10
                        },
                        new
                        {
                            ID = 59,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 10
                        },
                        new
                        {
                            ID = 60,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 3,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 10
                        },
                        new
                        {
                            ID = 61,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 10
                        },
                        new
                        {
                            ID = 62,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 10
                        },
                        new
                        {
                            ID = 63,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 10
                        },
                        new
                        {
                            ID = 64,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 10
                        },
                        new
                        {
                            ID = 65,
                            LiczbaPunktow = 250.0,
                            RodzajSkladowejWspRekrut = 2,
                            WspolczynnikRekrutacyjnyID = 10
                        },
                        new
                        {
                            ID = 66,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 11
                        },
                        new
                        {
                            ID = 67,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 11
                        },
                        new
                        {
                            ID = 68,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 3,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 11
                        },
                        new
                        {
                            ID = 69,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 11
                        },
                        new
                        {
                            ID = 70,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 11
                        },
                        new
                        {
                            ID = 71,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 11
                        },
                        new
                        {
                            ID = 72,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 11
                        },
                        new
                        {
                            ID = 73,
                            LiczbaPunktow = 230.0,
                            RodzajSkladowejWspRekrut = 2,
                            WspolczynnikRekrutacyjnyID = 11
                        },
                        new
                        {
                            ID = 74,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 12
                        },
                        new
                        {
                            ID = 75,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 12
                        },
                        new
                        {
                            ID = 76,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 3,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 12
                        },
                        new
                        {
                            ID = 77,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 12
                        },
                        new
                        {
                            ID = 78,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 12
                        },
                        new
                        {
                            ID = 79,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 12
                        },
                        new
                        {
                            ID = 80,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 12
                        },
                        new
                        {
                            ID = 81,
                            LiczbaPunktow = 210.0,
                            RodzajSkladowejWspRekrut = 2,
                            WspolczynnikRekrutacyjnyID = 12
                        },
                        new
                        {
                            ID = 82,
                            LiczbaPunktow = 60.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 9
                        },
                        new
                        {
                            ID = 83,
                            LiczbaPunktow = 75.0,
                            PrzedmiotMaturalny = 3,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 9
                        },
                        new
                        {
                            ID = 84,
                            LiczbaPunktow = 80.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 9
                        },
                        new
                        {
                            ID = 85,
                            LiczbaPunktow = 100.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 9
                        },
                        new
                        {
                            ID = 86,
                            LiczbaPunktow = 50.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 9
                        },
                        new
                        {
                            ID = 87,
                            LiczbaPunktow = 45.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 9
                        },
                        new
                        {
                            ID = 88,
                            LiczbaPunktow = 90.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 9
                        },
                        new
                        {
                            ID = 89,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 14
                        },
                        new
                        {
                            ID = 90,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 14
                        },
                        new
                        {
                            ID = 91,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 3,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 14
                        },
                        new
                        {
                            ID = 92,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 14
                        },
                        new
                        {
                            ID = 93,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 14
                        },
                        new
                        {
                            ID = 94,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 14
                        },
                        new
                        {
                            ID = 95,
                            LiczbaPunktow = 70.0,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 14
                        },
                        new
                        {
                            ID = 96,
                            LiczbaPunktow = 210.0,
                            RodzajSkladowejWspRekrut = 2,
                            WspolczynnikRekrutacyjnyID = 14
                        });
                });

            modelBuilder.Entity("Aurora.Models.TuraRekrutacji", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataOtwarcia")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataZakonczenia")
                        .HasColumnType("datetime2");

                    b.Property<int>("KierunekStudiowID")
                        .HasColumnType("int");

                    b.Property<int>("LiczbaZajetychMiejsc")
                        .HasColumnType("int");

                    b.Property<int>("LimitPrzyjec")
                        .HasColumnType("int");

                    b.Property<double>("MinimalnyProgPunktowy")
                        .HasColumnType("float");

                    b.Property<int>("RodzajRekrutacji")
                        .HasColumnType("int");

                    b.Property<int>("StatusTury")
                        .HasColumnType("int");

                    b.Property<DateTime>("TerminZakonczeniaPrzyjmowaniaAplikacji")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("KierunekStudiowID");

                    b.ToTable("TuryRekrutacji");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DataOtwarcia = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataZakonczenia = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KierunekStudiowID = 1,
                            LiczbaZajetychMiejsc = 0,
                            LimitPrzyjec = 50,
                            MinimalnyProgPunktowy = 0.0,
                            RodzajRekrutacji = 2,
                            StatusTury = 2,
                            TerminZakonczeniaPrzyjmowaniaAplikacji = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 2,
                            DataOtwarcia = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataZakonczenia = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KierunekStudiowID = 2,
                            LiczbaZajetychMiejsc = 0,
                            LimitPrzyjec = 150,
                            MinimalnyProgPunktowy = 0.0,
                            RodzajRekrutacji = 2,
                            StatusTury = 2,
                            TerminZakonczeniaPrzyjmowaniaAplikacji = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 3,
                            DataOtwarcia = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataZakonczenia = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KierunekStudiowID = 2,
                            LiczbaZajetychMiejsc = 3,
                            LimitPrzyjec = 3,
                            MinimalnyProgPunktowy = 0.0,
                            RodzajRekrutacji = 2,
                            StatusTury = 4,
                            TerminZakonczeniaPrzyjmowaniaAplikacji = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 4,
                            DataOtwarcia = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataZakonczenia = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KierunekStudiowID = 3,
                            LiczbaZajetychMiejsc = 5,
                            LimitPrzyjec = 5,
                            MinimalnyProgPunktowy = 0.0,
                            RodzajRekrutacji = 2,
                            StatusTury = 2,
                            TerminZakonczeniaPrzyjmowaniaAplikacji = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 5,
                            DataOtwarcia = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataZakonczenia = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KierunekStudiowID = 1,
                            LiczbaZajetychMiejsc = 2,
                            LimitPrzyjec = 2,
                            MinimalnyProgPunktowy = 0.0,
                            RodzajRekrutacji = 2,
                            StatusTury = 4,
                            TerminZakonczeniaPrzyjmowaniaAplikacji = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 7,
                            DataOtwarcia = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataZakonczenia = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KierunekStudiowID = 4,
                            LiczbaZajetychMiejsc = 0,
                            LimitPrzyjec = 100,
                            MinimalnyProgPunktowy = 0.0,
                            RodzajRekrutacji = 2,
                            StatusTury = 2,
                            TerminZakonczeniaPrzyjmowaniaAplikacji = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 6,
                            DataOtwarcia = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataZakonczenia = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KierunekStudiowID = 5,
                            LiczbaZajetychMiejsc = 5,
                            LimitPrzyjec = 5,
                            MinimalnyProgPunktowy = 0.0,
                            RodzajRekrutacji = 2,
                            StatusTury = 2,
                            TerminZakonczeniaPrzyjmowaniaAplikacji = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Aurora.Models.Wiadomosc", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KandydatID")
                        .HasColumnType("int");

                    b.Property<int>("PracownikDziekanatuID")
                        .HasColumnType("int");

                    b.Property<string>("Tresc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("KandydatID");

                    b.HasIndex("PracownikDziekanatuID");

                    b.ToTable("Wiadomosci");
                });

            modelBuilder.Entity("Aurora.Models.WspolczynnikRekrutacyjny", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AplikacjaRekrutacyjnaID")
                        .HasColumnType("int");

                    b.Property<int?>("EgzaminID")
                        .HasColumnType("int");

                    b.Property<int?>("KierunekStudiowID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AplikacjaRekrutacyjnaID")
                        .IsUnique();

                    b.HasIndex("EgzaminID");

                    b.HasIndex("KierunekStudiowID");

                    b.ToTable("WspolczynnikiRekrutacyjne");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AplikacjaRekrutacyjnaID = 1
                        },
                        new
                        {
                            ID = 2,
                            AplikacjaRekrutacyjnaID = 2
                        },
                        new
                        {
                            ID = 3,
                            AplikacjaRekrutacyjnaID = 3
                        },
                        new
                        {
                            ID = 4,
                            AplikacjaRekrutacyjnaID = 4
                        },
                        new
                        {
                            ID = 5,
                            AplikacjaRekrutacyjnaID = 5
                        },
                        new
                        {
                            ID = 6,
                            AplikacjaRekrutacyjnaID = 6
                        },
                        new
                        {
                            ID = 7,
                            AplikacjaRekrutacyjnaID = 7
                        },
                        new
                        {
                            ID = 8,
                            AplikacjaRekrutacyjnaID = 8
                        },
                        new
                        {
                            ID = 9,
                            AplikacjaRekrutacyjnaID = 9
                        },
                        new
                        {
                            ID = 10,
                            AplikacjaRekrutacyjnaID = 10
                        },
                        new
                        {
                            ID = 11,
                            AplikacjaRekrutacyjnaID = 11
                        },
                        new
                        {
                            ID = 12,
                            AplikacjaRekrutacyjnaID = 12
                        },
                        new
                        {
                            ID = 13,
                            AplikacjaRekrutacyjnaID = 13
                        },
                        new
                        {
                            ID = 14,
                            AplikacjaRekrutacyjnaID = 14
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AplikacjaRekrutacyjnaDziedzinaEgzaminuWstepnego", b =>
                {
                    b.HasOne("Aurora.Models.AplikacjaRekrutacyjna", null)
                        .WithMany()
                        .HasForeignKey("AplikacjeRekrutacyjneID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aurora.Models.DziedzinaEgzaminuWstepnego", null)
                        .WithMany()
                        .HasForeignKey("EgzaminyWstepneID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Aurora.Models.AplikacjaRekrutacyjna", b =>
                {
                    b.HasOne("Aurora.Models.Kandydat", "Kandydat")
                        .WithMany()
                        .HasForeignKey("KandydatID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aurora.Models.KierunekStudiow", "KierunekStudiow")
                        .WithMany("aplikacje")
                        .HasForeignKey("KierunekStudiowID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aurora.Models.OplataRekrutacyjna", "OplataRekrutacyjna")
                        .WithMany()
                        .HasForeignKey("OplataRekrutacyjnaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aurora.Models.TuraRekrutacji", "TuraRekrutacji")
                        .WithMany("aplikacje")
                        .HasForeignKey("TuraRekrutacjiID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kandydat");

                    b.Navigation("KierunekStudiow");

                    b.Navigation("OplataRekrutacyjna");

                    b.Navigation("TuraRekrutacji");
                });

            modelBuilder.Entity("Aurora.Models.AplikacjaRekrutacyjnaDokument", b =>
                {
                    b.HasOne("Aurora.Models.AplikacjaRekrutacyjna", "AplikacjaRekrutacyjna")
                        .WithMany("Dokumenty")
                        .HasForeignKey("AplikacjaRekrutacyjnaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aurora.Models.Dokument", "Dokument")
                        .WithMany("Aplikacje")
                        .HasForeignKey("DokumentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AplikacjaRekrutacyjna");

                    b.Navigation("Dokument");
                });

            modelBuilder.Entity("Aurora.Models.DokumentTura", b =>
                {
                    b.HasOne("Aurora.Models.Dokument", "Dokument")
                        .WithMany("Tury")
                        .HasForeignKey("DokumentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aurora.Models.TuraRekrutacji", "TuraRekrutacji")
                        .WithMany("Dokumenty")
                        .HasForeignKey("TuraRekrutacjiID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dokument");

                    b.Navigation("TuraRekrutacji");
                });

            modelBuilder.Entity("Aurora.Models.DziedzinaEgzaminuWstepnegoKierunekStudiow", b =>
                {
                    b.HasOne("Aurora.Models.DziedzinaEgzaminuWstepnego", "Dziedzina")
                        .WithMany("KierunkiStudiow")
                        .HasForeignKey("DziedzinaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aurora.Models.KierunekStudiow", "KierunekStudiow")
                        .WithMany("DostepneEgzaminyWstepne")
                        .HasForeignKey("KierunekStudiowID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dziedzina");

                    b.Navigation("KierunekStudiow");
                });

            modelBuilder.Entity("Aurora.Models.Egzamin", b =>
                {
                    b.HasOne("Aurora.Models.Kandydat", "Kandydat")
                        .WithMany("Egzaminy")
                        .HasForeignKey("KandydatID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aurora.Models.TuraRekrutacji", "TuraRekrutacji")
                        .WithMany("egzaminy")
                        .HasForeignKey("TuraRekrutacjiID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Kandydat");

                    b.Navigation("TuraRekrutacji");
                });

            modelBuilder.Entity("Aurora.Models.Kandydat", b =>
                {
                    b.HasOne("Aurora.Models.Adres", "Adres")
                        .WithMany()
                        .HasForeignKey("AdresID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Adres");
                });

            modelBuilder.Entity("Aurora.Models.KandydatKierunekStudiow", b =>
                {
                    b.HasOne("Aurora.Models.Kandydat", "Kandydat")
                        .WithMany("ListaUlubionychKierunkow")
                        .HasForeignKey("KandydatID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aurora.Models.KierunekStudiow", "KierunekStudiow")
                        .WithMany("kandydaci")
                        .HasForeignKey("KierunekStudiowID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kandydat");

                    b.Navigation("KierunekStudiow");
                });

            modelBuilder.Entity("Aurora.Models.KandydatTuraRekrutacji", b =>
                {
                    b.HasOne("Aurora.Models.Kandydat", "Kandydat")
                        .WithMany()
                        .HasForeignKey("KandydatID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aurora.Models.TuraRekrutacji", "TuraRekrutacji")
                        .WithMany()
                        .HasForeignKey("TuraRekrutacjiID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kandydat");

                    b.Navigation("TuraRekrutacji");
                });

            modelBuilder.Entity("Aurora.Models.KandydatUlubionyKierunekStudiow", b =>
                {
                    b.HasOne("Aurora.Models.Kandydat", "Kandydat")
                        .WithMany("WybraneKierunki")
                        .HasForeignKey("KandydatID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aurora.Models.KierunekStudiow", "UlubionyKierunekStudiow")
                        .WithMany("ulubioneKandydat")
                        .HasForeignKey("UlubionyKierunekStudiowID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kandydat");

                    b.Navigation("UlubionyKierunekStudiow");
                });

            modelBuilder.Entity("Aurora.Models.Opinia", b =>
                {
                    b.HasOne("Aurora.Models.Kandydat", "Kandydat")
                        .WithMany("Opinie")
                        .HasForeignKey("KandydatID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aurora.Models.TuraRekrutacji", "TuraRekrutacji")
                        .WithMany("Opinie")
                        .HasForeignKey("TuraRekrutacjiID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kandydat");

                    b.Navigation("TuraRekrutacji");
                });

            modelBuilder.Entity("Aurora.Models.OplataRekrutacyjna", b =>
                {
                    b.HasOne("Aurora.Models.Kandydat", "Kandydat")
                        .WithMany("Oplaty")
                        .HasForeignKey("KandydatID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kandydat");
                });

            modelBuilder.Entity("Aurora.Models.SkladowaWspRekrut", b =>
                {
                    b.HasOne("Aurora.Models.Egzamin", "Egzamin")
                        .WithMany()
                        .HasForeignKey("EgzaminID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Aurora.Models.WspolczynnikRekrutacyjny", "WspolczynnikRekrutacyjny")
                        .WithMany("skladowe")
                        .HasForeignKey("WspolczynnikRekrutacyjnyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Egzamin");

                    b.Navigation("WspolczynnikRekrutacyjny");
                });

            modelBuilder.Entity("Aurora.Models.TuraRekrutacji", b =>
                {
                    b.HasOne("Aurora.Models.KierunekStudiow", "KierunekStudiow")
                        .WithMany("turyRekrutacji")
                        .HasForeignKey("KierunekStudiowID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("KierunekStudiow");
                });

            modelBuilder.Entity("Aurora.Models.Wiadomosc", b =>
                {
                    b.HasOne("Aurora.Models.Kandydat", "kandydat")
                        .WithMany("wiadomosci")
                        .HasForeignKey("KandydatID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aurora.Models.PracownikDziekanatu", "pracownikDziekanatu")
                        .WithMany()
                        .HasForeignKey("PracownikDziekanatuID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("kandydat");

                    b.Navigation("pracownikDziekanatu");
                });

            modelBuilder.Entity("Aurora.Models.WspolczynnikRekrutacyjny", b =>
                {
                    b.HasOne("Aurora.Models.AplikacjaRekrutacyjna", "AplikacjaRekrutacyjna")
                        .WithOne("WspolczynnikRekrutacyjny")
                        .HasForeignKey("Aurora.Models.WspolczynnikRekrutacyjny", "AplikacjaRekrutacyjnaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aurora.Models.Egzamin", "Egzamin")
                        .WithMany()
                        .HasForeignKey("EgzaminID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Aurora.Models.KierunekStudiow", null)
                        .WithMany("WspolczynnikiRekrut")
                        .HasForeignKey("KierunekStudiowID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AplikacjaRekrutacyjna");

                    b.Navigation("Egzamin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Aurora.Models.AplikacjaRekrutacyjna", b =>
                {
                    b.Navigation("Dokumenty");

                    b.Navigation("WspolczynnikRekrutacyjny");
                });

            modelBuilder.Entity("Aurora.Models.Dokument", b =>
                {
                    b.Navigation("Aplikacje");

                    b.Navigation("Tury");
                });

            modelBuilder.Entity("Aurora.Models.DziedzinaEgzaminuWstepnego", b =>
                {
                    b.Navigation("KierunkiStudiow");
                });

            modelBuilder.Entity("Aurora.Models.Kandydat", b =>
                {
                    b.Navigation("Egzaminy");

                    b.Navigation("ListaUlubionychKierunkow");

                    b.Navigation("Opinie");

                    b.Navigation("Oplaty");

                    b.Navigation("wiadomosci");

                    b.Navigation("WybraneKierunki");
                });

            modelBuilder.Entity("Aurora.Models.KierunekStudiow", b =>
                {
                    b.Navigation("aplikacje");

                    b.Navigation("DostepneEgzaminyWstepne");

                    b.Navigation("kandydaci");

                    b.Navigation("turyRekrutacji");

                    b.Navigation("ulubioneKandydat");

                    b.Navigation("WspolczynnikiRekrut");
                });

            modelBuilder.Entity("Aurora.Models.TuraRekrutacji", b =>
                {
                    b.Navigation("aplikacje");

                    b.Navigation("Dokumenty");

                    b.Navigation("egzaminy");

                    b.Navigation("Opinie");
                });

            modelBuilder.Entity("Aurora.Models.WspolczynnikRekrutacyjny", b =>
                {
                    b.Navigation("skladowe");
                });
#pragma warning restore 612, 618
        }
    }
}
