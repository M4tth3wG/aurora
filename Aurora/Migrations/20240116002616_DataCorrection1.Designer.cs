// <auto-generated />
using System;
using Aurora.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Aurora.Migrations
{
    [DbContext(typeof(DataDbContext))]
    [Migration("20240116002616_DataCorrection1")]
    partial class DataCorrection1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Aurora.Models.Adres", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("KodPocztowy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Miejscowosc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NumerBudynku")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID");

                    b.ToTable("Adresy");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            KodPocztowy = "00-001",
                            Miejscowosc = "Warszawa",
                            NumerBudynku = "123",
                            Ulica = "Aleje Jerozolimskie"
                        },
                        new
                        {
                            ID = 2,
                            KodPocztowy = "30-062",
                            Miejscowosc = "Kraków",
                            NumerBudynku = "45",
                            Ulica = "Rynek Główny"
                        },
                        new
                        {
                            ID = 3,
                            KodPocztowy = "80-830",
                            Miejscowosc = "Gdańsk",
                            NumerBudynku = "8",
                            Ulica = "Długi Targ"
                        },
                        new
                        {
                            ID = 4,
                            KodPocztowy = "50-384",
                            Miejscowosc = "Wrocław",
                            NumerBudynku = "4",
                            Ulica = "Plac Grunwaldzki"
                        });
                });

            modelBuilder.Entity("Aurora.Models.AplikacjaRekrutacyjna", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DataZlozenia")
                        .HasColumnType("datetime2");

                    b.Property<int>("KandydatID")
                        .HasColumnType("int");

                    b.Property<int>("KierunekStudiowID")
                        .HasColumnType("int");

                    b.Property<int>("OplataRekrutacyjnaID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TuraRekrutacjiID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("KandydatID");

                    b.HasIndex("KierunekStudiowID");

                    b.HasIndex("OplataRekrutacyjnaID");

                    b.HasIndex("TuraRekrutacjiID");

                    b.ToTable("AplikacjeRekrutacyjne");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DataZlozenia = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KandydatID = 2,
                            KierunekStudiowID = 1,
                            OplataRekrutacyjnaID = 1,
                            Status = 8,
                            TuraRekrutacjiID = 1
                        },
                        new
                        {
                            ID = 2,
                            DataZlozenia = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KandydatID = 2,
                            KierunekStudiowID = 2,
                            OplataRekrutacyjnaID = 2,
                            Status = 8,
                            TuraRekrutacjiID = 1
                        });
                });

            modelBuilder.Entity("Aurora.Models.Egzamin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Dziedzina")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Forma")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("KandydatID")
                        .HasColumnType("int");

                    b.Property<string>("Kod")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Kwalifikacje")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("LiczbaPunktow")
                        .HasColumnType("float");

                    b.Property<double?>("MaksymalnaLiczbaPunktow")
                        .HasColumnType("float");

                    b.Property<string>("Ocena")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Organ")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Poziom")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Przedmiot")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("TuraRekrutacjiID")
                        .HasColumnType("int");

                    b.Property<double?>("WynikProcentowy")
                        .HasColumnType("float");

                    b.Property<string>("ZawodNauczany")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("KandydatID");

                    b.HasIndex("TuraRekrutacjiID");

                    b.ToTable("Egzaminy");
                });

            modelBuilder.Entity("Aurora.Models.Kandydat", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AdresEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("AdresID")
                        .HasColumnType("int");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PESEL")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("ID");

                    b.HasIndex("AdresID");

                    b.HasIndex("PESEL")
                        .IsUnique();

                    b.ToTable("Kandydaci");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AdresEmail = "jan.kowalski@example.com",
                            AdresID = 2,
                            Imie = "Jan",
                            Nazwisko = "Kowalski",
                            PESEL = "12345678901"
                        },
                        new
                        {
                            ID = 2,
                            AdresEmail = "anna.nowak@example.com",
                            AdresID = 3,
                            Imie = "Anna",
                            Nazwisko = "Nowak",
                            PESEL = "98765432109"
                        },
                        new
                        {
                            ID = 3,
                            AdresEmail = "piotr.zalewski@example.com",
                            AdresID = 1,
                            Imie = "Piotr",
                            Nazwisko = "Zalewski",
                            PESEL = "55511133344"
                        },
                        new
                        {
                            ID = 4,
                            AdresEmail = "adam.kowalski@example.com",
                            AdresID = 4,
                            Imie = "Adam",
                            Nazwisko = "Kowalski",
                            PESEL = "66677733212"
                        });
                });

            modelBuilder.Entity("Aurora.Models.KandydatKierunekStudiow", b =>
                {
                    b.Property<int>("KandydatID")
                        .HasColumnType("int");

                    b.Property<int>("KierunekStudiowID")
                        .HasColumnType("int");

                    b.HasKey("KandydatID", "KierunekStudiowID");

                    b.HasIndex("KierunekStudiowID");

                    b.ToTable("KandydatKierunekStudiow");
                });

            modelBuilder.Entity("Aurora.Models.KandydatTuraRekrutacji", b =>
                {
                    b.Property<int>("KandydatID")
                        .HasColumnType("int");

                    b.Property<int>("TuraRekrutacjiID")
                        .HasColumnType("int");

                    b.HasKey("KandydatID", "TuraRekrutacjiID");

                    b.HasIndex("TuraRekrutacjiID");

                    b.ToTable("KandydaciTuryRekrutacji");
                });

            modelBuilder.Entity("Aurora.Models.KandydatUlubionyKierunekStudiow", b =>
                {
                    b.Property<int>("KandydatID")
                        .HasColumnType("int");

                    b.Property<int>("UlubionyKierunekStudiowID")
                        .HasColumnType("int");

                    b.HasKey("KandydatID", "UlubionyKierunekStudiowID");

                    b.HasIndex("UlubionyKierunekStudiowID");

                    b.ToTable("KandydatUlubionyKierunekStudiow");
                });

            modelBuilder.Entity("Aurora.Models.KierunekStudiow", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("Czesne")
                        .HasColumnType("float");

                    b.Property<double>("CzesneDlaObcokrajowcow")
                        .HasColumnType("float");

                    b.Property<int>("FormaStudiow")
                        .HasColumnType("int");

                    b.Property<int>("JezykWykladowy")
                        .HasColumnType("int");

                    b.Property<int>("MiejsceStudiow")
                        .HasColumnType("int");

                    b.Property<string>("NazwaKierunku")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OpisKierunku")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PoziomStudiow")
                        .HasColumnType("int");

                    b.Property<int>("Wydzial")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("KierunkiStudiow");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Czesne = 0.0,
                            CzesneDlaObcokrajowcow = 1500.0,
                            FormaStudiow = 0,
                            JezykWykladowy = 1,
                            MiejsceStudiow = 0,
                            NazwaKierunku = "Architektura",
                            OpisKierunku = "Architektura dla ambitnych",
                            PoziomStudiow = 0,
                            Wydzial = 0
                        },
                        new
                        {
                            ID = 2,
                            Czesne = 0.0,
                            CzesneDlaObcokrajowcow = 1250.0,
                            FormaStudiow = 0,
                            JezykWykladowy = 1,
                            MiejsceStudiow = 0,
                            NazwaKierunku = "Automatyka i Robotyka",
                            OpisKierunku = "AiR dla wymagających",
                            PoziomStudiow = 0,
                            Wydzial = 10
                        });
                });

            modelBuilder.Entity("Aurora.Models.OplataRekrutacyjna", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("KandydatID")
                        .HasColumnType("int");

                    b.Property<double>("Kwota")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("KandydatID");

                    b.ToTable("OplatyRekrutacyjne");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            KandydatID = 2,
                            Kwota = 80.0
                        },
                        new
                        {
                            ID = 2,
                            KandydatID = 2,
                            Kwota = 80.0
                        });
                });

            modelBuilder.Entity("Aurora.Models.SkladowaWspRekrut", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("EgzaminID")
                        .HasColumnType("int");

                    b.Property<int?>("PrzedmiotMaturalny")
                        .HasColumnType("int");

                    b.Property<int>("RodzajSkladowejWspRekrut")
                        .HasColumnType("int");

                    b.Property<int>("WspolczynnikRekrutacyjnyID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EgzaminID");

                    b.HasIndex("WspolczynnikRekrutacyjnyID");

                    b.ToTable("SkladoweWspRekrut");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 1
                        },
                        new
                        {
                            ID = 2,
                            PrzedmiotMaturalny = 3,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 1
                        },
                        new
                        {
                            ID = 3,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 1
                        },
                        new
                        {
                            ID = 4,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 1
                        },
                        new
                        {
                            ID = 5,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 1
                        },
                        new
                        {
                            ID = 6,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 1
                        },
                        new
                        {
                            ID = 7,
                            RodzajSkladowejWspRekrut = 2,
                            WspolczynnikRekrutacyjnyID = 1
                        },
                        new
                        {
                            ID = 8,
                            PrzedmiotMaturalny = 0,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 2
                        },
                        new
                        {
                            ID = 9,
                            PrzedmiotMaturalny = 3,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 2
                        },
                        new
                        {
                            ID = 10,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 2
                        },
                        new
                        {
                            ID = 11,
                            PrzedmiotMaturalny = 1,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 2
                        },
                        new
                        {
                            ID = 12,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 0,
                            WspolczynnikRekrutacyjnyID = 2
                        },
                        new
                        {
                            ID = 13,
                            PrzedmiotMaturalny = 2,
                            RodzajSkladowejWspRekrut = 1,
                            WspolczynnikRekrutacyjnyID = 2
                        },
                        new
                        {
                            ID = 14,
                            RodzajSkladowejWspRekrut = 2,
                            WspolczynnikRekrutacyjnyID = 2
                        });
                });

            modelBuilder.Entity("Aurora.Models.TuraRekrutacji", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DataOtwarcia")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataZakonczenia")
                        .HasColumnType("datetime2");

                    b.Property<int>("KierunekStudiowID")
                        .HasColumnType("int");

                    b.Property<int>("LiczbaZajetychMiejsc")
                        .HasColumnType("int");

                    b.Property<int>("LimitPrzyjec")
                        .HasColumnType("int");

                    b.Property<double>("MinimalnyProgPunktowy")
                        .HasColumnType("float");

                    b.Property<int>("RodzajRekrutacji")
                        .HasColumnType("int");

                    b.Property<int>("StatusTury")
                        .HasColumnType("int");

                    b.Property<DateTime>("TerminZakonczeniaPrzyjmowaniaAplikacji")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("KierunekStudiowID");

                    b.ToTable("TuryRekrutacji");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DataOtwarcia = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataZakonczenia = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KierunekStudiowID = 1,
                            LiczbaZajetychMiejsc = 0,
                            LimitPrzyjec = 50,
                            MinimalnyProgPunktowy = 300.0,
                            RodzajRekrutacji = 2,
                            StatusTury = 2,
                            TerminZakonczeniaPrzyjmowaniaAplikacji = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 2,
                            DataOtwarcia = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataZakonczenia = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KierunekStudiowID = 2,
                            LiczbaZajetychMiejsc = 0,
                            LimitPrzyjec = 150,
                            MinimalnyProgPunktowy = 225.0,
                            RodzajRekrutacji = 2,
                            StatusTury = 2,
                            TerminZakonczeniaPrzyjmowaniaAplikacji = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Aurora.Models.Wiadomosc", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("KandydatID")
                        .HasColumnType("int");

                    b.Property<string>("Tresc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("KandydatID");

                    b.ToTable("Wiadomosc");
                });

            modelBuilder.Entity("Aurora.Models.WspolczynnikRekrutacyjny", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AplikacjaRekrutacyjnaID")
                        .HasColumnType("int");

                    b.Property<int?>("egzaminID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AplikacjaRekrutacyjnaID")
                        .IsUnique();

                    b.HasIndex("egzaminID");

                    b.ToTable("WspolczynnikiRekrutacyjne");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AplikacjaRekrutacyjnaID = 1
                        },
                        new
                        {
                            ID = 2,
                            AplikacjaRekrutacyjnaID = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Aurora.Models.AplikacjaRekrutacyjna", b =>
                {
                    b.HasOne("Aurora.Models.Kandydat", "Kandydat")
                        .WithMany()
                        .HasForeignKey("KandydatID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aurora.Models.KierunekStudiow", "KierunekStudiow")
                        .WithMany("aplikacje")
                        .HasForeignKey("KierunekStudiowID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aurora.Models.OplataRekrutacyjna", "OplataRekrutacyjna")
                        .WithMany()
                        .HasForeignKey("OplataRekrutacyjnaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aurora.Models.TuraRekrutacji", "TuraRekrutacji")
                        .WithMany("aplikacje")
                        .HasForeignKey("TuraRekrutacjiID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kandydat");

                    b.Navigation("KierunekStudiow");

                    b.Navigation("OplataRekrutacyjna");

                    b.Navigation("TuraRekrutacji");
                });

            modelBuilder.Entity("Aurora.Models.Egzamin", b =>
                {
                    b.HasOne("Aurora.Models.Kandydat", "Kandydat")
                        .WithMany("Egzaminy")
                        .HasForeignKey("KandydatID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aurora.Models.TuraRekrutacji", "TuraRekrutacji")
                        .WithMany("egzaminy")
                        .HasForeignKey("TuraRekrutacjiID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Kandydat");

                    b.Navigation("TuraRekrutacji");
                });

            modelBuilder.Entity("Aurora.Models.Kandydat", b =>
                {
                    b.HasOne("Aurora.Models.Adres", "Adres")
                        .WithMany()
                        .HasForeignKey("AdresID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Adres");
                });

            modelBuilder.Entity("Aurora.Models.KandydatKierunekStudiow", b =>
                {
                    b.HasOne("Aurora.Models.Kandydat", "Kandydat")
                        .WithMany("ListaUlubionychKierunkow")
                        .HasForeignKey("KandydatID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aurora.Models.KierunekStudiow", "KierunekStudiow")
                        .WithMany("kandydaci")
                        .HasForeignKey("KierunekStudiowID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kandydat");

                    b.Navigation("KierunekStudiow");
                });

            modelBuilder.Entity("Aurora.Models.KandydatTuraRekrutacji", b =>
                {
                    b.HasOne("Aurora.Models.Kandydat", "Kandydat")
                        .WithMany()
                        .HasForeignKey("KandydatID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aurora.Models.TuraRekrutacji", "TuraRekrutacji")
                        .WithMany()
                        .HasForeignKey("TuraRekrutacjiID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kandydat");

                    b.Navigation("TuraRekrutacji");
                });

            modelBuilder.Entity("Aurora.Models.KandydatUlubionyKierunekStudiow", b =>
                {
                    b.HasOne("Aurora.Models.Kandydat", "Kandydat")
                        .WithMany("WybraneKierunki")
                        .HasForeignKey("KandydatID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aurora.Models.KierunekStudiow", "UlubionyKierunekStudiow")
                        .WithMany("ulubioneKandydat")
                        .HasForeignKey("UlubionyKierunekStudiowID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kandydat");

                    b.Navigation("UlubionyKierunekStudiow");
                });

            modelBuilder.Entity("Aurora.Models.OplataRekrutacyjna", b =>
                {
                    b.HasOne("Aurora.Models.Kandydat", "Kandydat")
                        .WithMany("Oplaty")
                        .HasForeignKey("KandydatID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kandydat");
                });

            modelBuilder.Entity("Aurora.Models.SkladowaWspRekrut", b =>
                {
                    b.HasOne("Aurora.Models.Egzamin", "Egzamin")
                        .WithMany()
                        .HasForeignKey("EgzaminID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Aurora.Models.WspolczynnikRekrutacyjny", "WspolczynnikRekrutacyjny")
                        .WithMany("skladowe")
                        .HasForeignKey("WspolczynnikRekrutacyjnyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Egzamin");

                    b.Navigation("WspolczynnikRekrutacyjny");
                });

            modelBuilder.Entity("Aurora.Models.TuraRekrutacji", b =>
                {
                    b.HasOne("Aurora.Models.KierunekStudiow", "KierunekStudiow")
                        .WithMany("turyRekrutacji")
                        .HasForeignKey("KierunekStudiowID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("KierunekStudiow");
                });

            modelBuilder.Entity("Aurora.Models.Wiadomosc", b =>
                {
                    b.HasOne("Aurora.Models.Kandydat", null)
                        .WithMany("wiadomosci")
                        .HasForeignKey("KandydatID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Aurora.Models.WspolczynnikRekrutacyjny", b =>
                {
                    b.HasOne("Aurora.Models.AplikacjaRekrutacyjna", "AplikacjaRekrutacyjna")
                        .WithOne("WspolczynnikRekrutacyjny")
                        .HasForeignKey("Aurora.Models.WspolczynnikRekrutacyjny", "AplikacjaRekrutacyjnaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aurora.Models.Egzamin", "egzamin")
                        .WithMany()
                        .HasForeignKey("egzaminID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AplikacjaRekrutacyjna");

                    b.Navigation("egzamin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Aurora.Models.AplikacjaRekrutacyjna", b =>
                {
                    b.Navigation("WspolczynnikRekrutacyjny");
                });

            modelBuilder.Entity("Aurora.Models.Kandydat", b =>
                {
                    b.Navigation("Egzaminy");

                    b.Navigation("ListaUlubionychKierunkow");

                    b.Navigation("Oplaty");

                    b.Navigation("wiadomosci");

                    b.Navigation("WybraneKierunki");
                });

            modelBuilder.Entity("Aurora.Models.KierunekStudiow", b =>
                {
                    b.Navigation("aplikacje");

                    b.Navigation("kandydaci");

                    b.Navigation("turyRekrutacji");

                    b.Navigation("ulubioneKandydat");
                });

            modelBuilder.Entity("Aurora.Models.TuraRekrutacji", b =>
                {
                    b.Navigation("aplikacje");

                    b.Navigation("egzaminy");
                });

            modelBuilder.Entity("Aurora.Models.WspolczynnikRekrutacyjny", b =>
                {
                    b.Navigation("skladowe");
                });
#pragma warning restore 612, 618
        }
    }
}
